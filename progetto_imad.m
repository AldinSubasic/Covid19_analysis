close all
clear
clc

%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: C:\Users\aldin\OneDrive\Desktop\progetto imad\dati row progetto.csv
%
% Auto-generated by MATLAB on 15-May-2023 16:39:03

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 24);

% Specify range and delimiter
opts.DataLines = [222, 372];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["data", "stato", "ricoverati_con_sintomi", "terapia_intensiva", "totale_ospedalizzati", "isolamento_domiciliare", "totale_positivi", "variazione_totale_positivi", "nuovi_positivi", "dimessi_guariti", "deceduti", "casi_da_sospetto_diagnostico", "casi_da_screening", "totale_casi", "tamponi", "casi_testati", "note", "ingressi_terapia_intensiva", "note_test", "note_casi", "totale_positivi_test_molecolare", "totale_positivi_test_antigenico_rapido", "tamponi_test_molecolare", "tamponi_test_antigenico_rapido"];
opts.VariableTypes = ["datetime", "categorical", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "string", "string", "string", "string", "string", "string", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["ingressi_terapia_intensiva", "note_test", "note_casi", "totale_positivi_test_molecolare", "totale_positivi_test_antigenico_rapido", "tamponi_test_molecolare", "tamponi_test_antigenico_rapido"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["stato", "ingressi_terapia_intensiva", "note_test", "note_casi", "totale_positivi_test_molecolare", "totale_positivi_test_antigenico_rapido", "tamponi_test_molecolare", "tamponi_test_antigenico_rapido"], "EmptyFieldRule", "auto");
opts = setvaropts(opts, "data", "InputFormat", "yyyy-MM-dd'T'HH:mm:ss");
opts = setvaropts(opts, "note", "TrimNonNumeric", true);
opts = setvaropts(opts, "note", "ThousandsSeparator", ",");

% Import the data
OSP_data = readtable("C:\Users\aldin\OneDrive\Desktop\progetto imad\dati row progetto.csv", opts);


%% Clear temporary variables
clear opts


%% plot

figure(1)
scatter(OSP_data,"data","totale_ospedalizzati", "filled")
hold on
grid on
scatter(OSP_data,"data","nuovi_positivi", "filled")
Y = OSP_data.totale_ospedalizzati;
U = OSP_data.nuovi_positivi;
legend('Ospedalizzati', 'Nuovi Positivi')

%% primo modello

D = 0:1:20;
R = [];
for i = 1:length(D)
    
    Res = corrcoef(U(1:end-D(i),1),Y(D(i)+1:end,1));  %calcolo coefficiente di correlazione tra ingresso e uscita D(i), che viene sfasato ad ogni iterazione 
    R(i)=Res(1,2);
end

 max_coeff = max(R); %massimizzare il coefficiente di correlazione


D_max = D(R==max_coeff);

%% mu con LS

Phi = U(1:end-D_max,:);      %matrice che moltiplica i parametri teta da stimare

mu = Phi\(Y(D_max+1:end,:)); %stimo teta ls, frazione di positivi che finisce in ospedale

%% Modello dei poveri

Y_cap_poveri = mu*U(1:end-D_max,:); 
figure(2)
plot(OSP_data.data(D_max+1:end,:),Y(D_max+1:end,:));
hold on
grid on
plot(OSP_data.data(D_max+1:end,:),Y_cap_poveri)
legend('Ospedalizzati', 'Ospedalizzati Stimati')

%% modello esponenziale con 3 parametri

n = 0;

lambda = linspace(0,0.1,100); %linspace(0.04,0.06,100); 
e=[];

SSR = [];
muu = linspace(0,3,100);%linspace(1,2,100); 
for D_n = n:n
    for j = 1:length(muu)
        for i = 1:length(lambda)
            p=zeros(length(Y)-D_n,1);
            for t = D_n+1:length(U)
        
                for k = 1:min((t-D_n),(floor(10/lambda(i))+1))
            
                     Y_cap_e = (muu(j)*lambda(i)*exp(-lambda(i)*k))  * U(t-D_n-k+1);
                     p(t-D_n) = p(t-D_n)+Y_cap_e;
                end
                
            end
            e = Y(D_n+1:end,:) - p;
            SSR(i,j,D_n-n+1) = e'*e;
            
        end
    end
end

%% SSR Minimo

SSR_min = min(min(SSR));

%% Calcolo valori ottimi

[I,J]= find(SSR == SSR_min);

lam8=lambda(I);
mu8 = muu(J);
D8 = D_n;
[MU,LM] = meshgrid(muu, lambda);
figure(4)
mesh(MU,LM, SSR(:,:))
hold on
contour3(MU, LM, SSR(:,:), 100, 'r', 'LineWidth',1)

figure(5)
heatmap(SSR(:,:), 'Colormap', turbo)

%% Stima con valori ottimi

p=zeros(length(Y)-D8,1);
for t = D8+1:length(U)
    for k = 1:t-D8
            Y_cap_e = (muu(J)*lambda(I)*exp(-lambda(I)*k)) * U(t-D8-k+1);
        p(t-D8) = p(t-D8)+Y_cap_e;
    end
end

e_p = Y(D8+1:end,:) - p;
SSR_p = e_p'*e_p;

figure(3)
plot(p,'r')
hold on
grid on
plot(Y(D8+1:end,:),'k')
legend('Modello Output Error','Dati Reali')

figure(6)
plot(p,'r')
hold on
grid on
plot(Y(D8+1:end,:),'k')
plot(D_max+1:length(Y),Y_cap_poveri,'b')
legend('Modello Output Error','Dati Reali', 'Modello dei Poveri')

%% Risultati

err_giorno=sqrt(SSR_min)/138;
media_giorno = mean(Y);
Q = err_giorno/media_giorno;
Qpercento =Q*100;                            %errore rispetto alla media
Giacenza_media = 1/(lam8);                   %quanti giorni i ricoverati stanno in osp

err = [];
for as = 1:length(Y)
    err(as) = Y(as)-p(as);    
end
max_error = max(err);

mean_error = mean(err);

%% Fit

e_tss = Y-mean(Y);
TSS = e_tss'*e_tss;

Fit = (1-sqrt(SSR_min/TSS))*100;

